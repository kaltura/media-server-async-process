version = '1.0'

task clean (type: Delete) {
	delete 'build'
}

task prepareAsyncMediaServerProcessClientAppRelease(type: Zip) {
	archiveName = "$buildDir/AsyncMediaServerProcessClientApp-$project.version" + ".zip"
  	from "$projectDir/"
  	exclude 'build.gradle', 'build', 'release.php'

 	doLast {
		println "AsyncMediaServerProcessClientApp ZIP: $prepareAsyncMediaServerProcessClientAppRelease.archivePath"
	}
}

task release(type:Exec, dependsOn: prepareAsyncMediaServerProcessClientAppRelease) {

    //check if client library already exists
    def user = System.getProperty("username")
    def pass = System.getProperty("password")

    //run the php release script
    workingDir projectDir
    commandLine "php", "$projectDir/release.php", user , pass, version

    doFirst {
        //validate username and password are set:
        if (user == null || pass == null) {
            throw new InvalidUserDataException("username or password arguments are null. use: 'gradle uploadRelease -Dusername=myuser -Dpassword=mypass'")
        }

        def clientLibs = new File("${buildDir}/tmp/github-php-client")

        // If it doesn't exist, download it from Github
        if (!clientLibs.exists()) {
            println "Downloading PHP github client library..."
            ant.get(src: "https://github.com/tan-tan-kanarek/github-php-client/archive/master.zip", dest: "${buildDir}/tmp/github-php-client.zip")
            ant.unzip(src: "${buildDir}/tmp/github-php-client.zip", dest: "${buildDir}/tmp")
            ant.delete(file: "${buildDir}/tmp/github-php-client.zip")
            ant.move(file: "${buildDir}/tmp/github-php-client-master/client", tofile: "${buildDir}/tmp/github-php-client")
            ant.delete(dir: "${buildDir}/tmp/github-php-client-master")
        } else {
            println "PHP Client exists. skip download."
        }
    }
}